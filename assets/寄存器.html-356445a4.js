import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,f as a}from"./app-56f07e55.js";const d={},l=a('<h1 id="_64-位下的寄存器" tabindex="-1"><a class="header-anchor" href="#_64-位下的寄存器" aria-hidden="true">#</a> 64 位下的寄存器</h1><h2 id="通用寄存器" tabindex="-1"><a class="header-anchor" href="#通用寄存器" aria-hidden="true">#</a> 通用寄存器</h2><table><thead><tr><th style="text-align:center;">寄存器</th><th style="text-align:center;">状态</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">RAX</td><td style="text-align:center;">易失</td><td style="text-align:center;">返回值</td></tr><tr><td style="text-align:center;">RBX</td><td style="text-align:center;">非易失</td><td style="text-align:center;">数据存储</td></tr><tr><td style="text-align:center;">RCX</td><td style="text-align:center;">易失</td><td style="text-align:center;">函数第 4 参数</td></tr><tr><td style="text-align:center;">RDX</td><td style="text-align:center;">易失</td><td style="text-align:center;">函数第 3 参数</td></tr><tr><td style="text-align:center;">RSI</td><td style="text-align:center;">非易失</td><td style="text-align:center;">函数第 2 参数</td></tr><tr><td style="text-align:center;">RDI</td><td style="text-align:center;">非易失</td><td style="text-align:center;">函数第 1 参数</td></tr><tr><td style="text-align:center;">R8</td><td style="text-align:center;">易失</td><td style="text-align:center;">函数第 5 参数</td></tr><tr><td style="text-align:center;">R9</td><td style="text-align:center;">易失</td><td style="text-align:center;">函数第 6 参数</td></tr><tr><td style="text-align:center;">R10-R11</td><td style="text-align:center;">易失</td><td style="text-align:center;">数据存储</td></tr><tr><td style="text-align:center;">R12-R15</td><td style="text-align:center;">非易失</td><td style="text-align:center;">数据存储</td></tr><tr><td style="text-align:center;">RSP</td><td style="text-align:center;">非易失</td><td style="text-align:center;">栈顶指针</td></tr><tr><td style="text-align:center;">RBP</td><td style="text-align:center;">非易失</td><td style="text-align:center;">栈基指针</td></tr></tbody></table><p>注： 易失是指被调用函数结束后，该寄存器的值可能会发生改变，因此需要由调用者保存；非易失则是由被调用者来保存，调用结束后的值没有改变。</p><p>​ 在x64环境下，函数的参数小于等于6个时，通过寄存器传递；大于6时，通过堆栈传递。</p><h2 id="段寄存器" tabindex="-1"><a class="header-anchor" href="#段寄存器" aria-hidden="true">#</a> 段寄存器</h2><p>CS,FS:代码段</p><p>DS,GS:数据段</p><p>SS:栈段</p><p>ES:拓展段</p><blockquote><p>段寄存器的内容跟 CPU 寻址模式有关:</p><ul><li>实模式: 段寄存器中存放的是段的基地址</li><li>保护模式: 此时存放的是段选择子</li></ul></blockquote><h2 id="指令寄存器" tabindex="-1"><a class="header-anchor" href="#指令寄存器" aria-hidden="true">#</a> 指令寄存器</h2><p>即RIP寄存器，存放的是PC指针的值</p><h2 id="标志寄存器" tabindex="-1"><a class="header-anchor" href="#标志寄存器" aria-hidden="true">#</a> 标志寄存器</h2><h2 id="控制寄存器" tabindex="-1"><a class="header-anchor" href="#控制寄存器" aria-hidden="true">#</a> 控制寄存器</h2><p>控制寄存器存放的是CPU的运行信息，32位CPU总共由cr0-cr4共5个控制寄存器，64位增加了cr8.</p><ul><li>cr0：存储了CPU控制标记和工作状态</li><li>cr1：保留未使用</li><li>cr2：页错误出现时保存导致出错的地址</li><li>cr3：存储了当前进程的虚拟地址空间的重要信息——页目录地址</li><li>cr4：存储了CPU工作相关及当前任务的信息</li><li>cr8：64位新增拓展</li></ul><h2 id="调试寄存器" tabindex="-1"><a class="header-anchor" href="#调试寄存器" aria-hidden="true">#</a> 调试寄存器</h2><h2 id="描述符寄存器" tabindex="-1"><a class="header-anchor" href="#描述符寄存器" aria-hidden="true">#</a> 描述符寄存器</h2><p>描述符寄存器共有三个：GDTR,LDTR,IDTR</p><ul><li>GDTR(全局描述符表寄存器): 存放的是全局描述符表GDT的地址,全局只有一张GDT表</li><li>LDTR(局部描述符表寄存器): 存放的是局部描述符表LDT的地址,每个进程有一张LDT表</li><li>IDTR(中断描述符表寄存器): 存放的是中断描述符表IDT的地址,IDT表存放在内核代码段中</li></ul><h2 id="任务寄存器" tabindex="-1"><a class="header-anchor" href="#任务寄存器" aria-hidden="true">#</a> 任务寄存器</h2><p>任务寄存器TR中存放的是当前任务的TSS描述符</p><h2 id="msr-寄存器" tabindex="-1"><a class="header-anchor" href="#msr-寄存器" aria-hidden="true">#</a> MSR 寄存器</h2><p>MSR寄存器用于实现<strong>快速系统调用</strong>,将系统调用程序的信息直接写在寄存器中,就不再需要内存查表</p>',25),n=[l];function i(c,s){return e(),r("div",null,n)}const g=t(d,[["render",i],["__file","寄存器.html.vue"]]);export{g as default};
