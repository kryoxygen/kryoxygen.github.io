import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-56f07e55.js";const p={},t=e(`<h3 id="线程的创建" tabindex="-1"><a class="header-anchor" href="#线程的创建" aria-hidden="true">#</a> 线程的创建</h3><ul><li>将执行对象放到线程中</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>QThread *m_pThread = new QThread;
A-&gt;moveThread(m_pThread);	//将所指对象
connect(········);
 m_pThread-&gt;start();	//开启线程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>继承QThread类</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//定义一个继承QThread的类，重写run方法</span>
WorkThread ：<span class="token keyword">public</span> QThread
<span class="token punctuation">{</span>
	·····
<span class="token punctuation">}</span>
workthread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">WorkThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
workthread<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件机制" tabindex="-1"><a class="header-anchor" href="#事件机制" aria-hidden="true">#</a> 事件机制</h3><blockquote><p><strong>过程：事件派发-&gt;事件过滤-&gt;事件分发-&gt;事件处理</strong></p></blockquote><ul><li><p>函数调用过程：</p><ol><li><p>事件产生后，QApplication对象调用notify()函数将事件发送到指定窗口:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">notify</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span>QEvent <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>首先判断该目标对象是否添加了事件过滤器,若有多个事件过滤器,则先发送给最后添加的<code>watched</code>对象.</p></li><li><p>事件只有QObject对象及其子类才可以处理，也可以通过<code>eventFilter</code>来进行事件过滤，默认不对任何事件进行过滤:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>watched<span class="token punctuation">,</span>QEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 当该函数返回true时，表示该事件处理完毕，无需发送到目标对象；当返回值为false时，需要发送到目标对象进行处理。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当事件发送到指定对象后，由该对象的<code>event</code>函数进行分类(QObject是所有用户对象的基类):</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">protected</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span>  <span class="token keyword">bool</span> <span class="token class-name">QWidget</span><span class="token double-colon punctuation">::</span><span class="token function">event</span><span class="token punctuation">(</span>QEvent <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token comment">// 如QpushButton等部件都是QWidget的派生类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>事件的处理:</p><ol><li><p>重写notify处理函数:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyApplication</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QApplication</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyApplication</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">QApplication</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">notify</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>reciver<span class="token punctuation">,</span>QEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>添加事件过滤器</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ui<span class="token operator">-&gt;</span>textEdit<span class="token operator">-&gt;</span><span class="token function">installEventFilter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>重写event函数</p></li></ol></li></ul><h3 id="qwidget中的show-close-exec-accept-reject" tabindex="-1"><a class="header-anchor" href="#qwidget中的show-close-exec-accept-reject" aria-hidden="true">#</a> QWidget中的show，close，exec，accept，reject</h3><ul><li>show：调用setVisible(bool)函数</li><li>close：默认调用hide函数隐藏窗口，当设置Qt::WA_DeleteOnClose属性时，会调用deletelater()函数</li><li>exec：显示窗口，提供一个可用的返回值并进入事件循环，显示的窗口为模态窗口</li><li>accept：关闭窗口，返回Accepted信号</li><li>reject：关闭窗口，返回Rejected信号</li></ul>`,10),c=[t];function o(l,i){return s(),a("div",null,c)}const u=n(p,[["render",o],["__file","常见用法.html.vue"]]);export{u as default};
