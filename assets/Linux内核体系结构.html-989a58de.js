const n=JSON.parse('{"key":"v-096937a2","path":"/notes/Linux/Linux%E5%86%85%E6%A0%B8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.html","title":"linux 进程控制","lang":"zh-CN","frontmatter":{"description":"内核结构图 linux 进程控制 对于 Linux0.11 内核而言，只支持 64 个进程，且 Linux 的内核堆栈和恶用户堆栈是分开的。用户堆栈用于存放进程在用户态下调用函数、局部变量等参数。 任务数据结构 内核程序徐通过进程表对进程进行管理，每个进程表项是一个 task_struct 任务结构(即 PCB)指针。 struct task_struct { long state; // 任务的运行状态，-1不可运行，0可运行，&gt;0中止 long counter; // 任务运行时间计数（时间片），递减 long priority; // 运行优先数 long signal; // 信号 struct sigaction sigaction[32]; // 信号属性结构 long blocked; // 屏蔽码 int exit_code; // 执行停止的退出码 unsigned long start_code; // 代码段地址 unsigned long end_code; // 代码段长度 unsigned long end_data; // 代码长度+数据长度 unsigned long brk; // 总长度 unsigned long start_stack; // 堆栈段地址 long pid; // 进程号 long father; // 父进程号 long pgrp; // 父进程组号 long session; // 会话号 long leader; // 会话首领 unsigned short uid; // 用户id unsigned short euid; // 有效用户id unsigned short suid; // 保存的用户id unsigned short gid; // 组id unsigned short egid; // 有效组id unsigned short sgid; // 保存的组id long alarm; // 报警定时值 long utime; // 用户态运行时间 long stime; // 系统态运行时间 long cutime; // 子进程用户态运行时间 long cstime; // 子进程系统态运行时间 long start_time; // 进程开始时刻 unsigned short used_math; // 标志是否使用了 int tty; // 进程使用tty的设备号 unsigned short umask; // 文件创建属性屏蔽位 struct m_inode *pwd; // 当前工作目录i节点结构 struct m_inode *root; // 根目录i节点结构 struct m_inode *executable; // 执行文件i节点结构 unsigned long close_on_exec; // 执行时关闭文件句柄位图标志 struct file *filp[NR_OPEN]; // 文件结构指针表 struct desc_struct ldt[3]; // 任务局部指针表 struct tss_struct tss; // 进程的任务状态段信息结构 };","head":[["meta",{"property":"og:url","content":"https://kryoxygen.github.io/notes/Linux/Linux%E5%86%85%E6%A0%B8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Kry"}],["meta",{"property":"og:title","content":"linux 进程控制"}],["meta",{"property":"og:description","content":"内核结构图 linux 进程控制 对于 Linux0.11 内核而言，只支持 64 个进程，且 Linux 的内核堆栈和恶用户堆栈是分开的。用户堆栈用于存放进程在用户态下调用函数、局部变量等参数。 任务数据结构 内核程序徐通过进程表对进程进行管理，每个进程表项是一个 task_struct 任务结构(即 PCB)指针。 struct task_struct { long state; // 任务的运行状态，-1不可运行，0可运行，&gt;0中止 long counter; // 任务运行时间计数（时间片），递减 long priority; // 运行优先数 long signal; // 信号 struct sigaction sigaction[32]; // 信号属性结构 long blocked; // 屏蔽码 int exit_code; // 执行停止的退出码 unsigned long start_code; // 代码段地址 unsigned long end_code; // 代码段长度 unsigned long end_data; // 代码长度+数据长度 unsigned long brk; // 总长度 unsigned long start_stack; // 堆栈段地址 long pid; // 进程号 long father; // 父进程号 long pgrp; // 父进程组号 long session; // 会话号 long leader; // 会话首领 unsigned short uid; // 用户id unsigned short euid; // 有效用户id unsigned short suid; // 保存的用户id unsigned short gid; // 组id unsigned short egid; // 有效组id unsigned short sgid; // 保存的组id long alarm; // 报警定时值 long utime; // 用户态运行时间 long stime; // 系统态运行时间 long cutime; // 子进程用户态运行时间 long cstime; // 子进程系统态运行时间 long start_time; // 进程开始时刻 unsigned short used_math; // 标志是否使用了 int tty; // 进程使用tty的设备号 unsigned short umask; // 文件创建属性屏蔽位 struct m_inode *pwd; // 当前工作目录i节点结构 struct m_inode *root; // 根目录i节点结构 struct m_inode *executable; // 执行文件i节点结构 unsigned long close_on_exec; // 执行时关闭文件句柄位图标志 struct file *filp[NR_OPEN]; // 文件结构指针表 struct desc_struct ldt[3]; // 任务局部指针表 struct tss_struct tss; // 进程的任务状态段信息结构 };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://kryoxygen.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-13T16:23:36.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"linux 进程控制"}],["meta",{"property":"article:author","content":"Kry Oxygen"}],["meta",{"property":"article:modified_time","content":"2023-08-13T16:23:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"linux 进程控制\\",\\"image\\":[\\"https://kryoxygen.github.io/\\"],\\"dateModified\\":\\"2023-08-13T16:23:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kry Oxygen\\",\\"url\\":\\"https://www.kryoxygen.cn\\"}]}"]]},"headers":[{"level":2,"title":"任务数据结构","slug":"任务数据结构","link":"#任务数据结构","children":[]},{"level":2,"title":"进程运行状态","slug":"进程运行状态","link":"#进程运行状态","children":[]},{"level":2,"title":"进程初始化","slug":"进程初始化","link":"#进程初始化","children":[]},{"level":2,"title":"进程切换","slug":"进程切换","link":"#进程切换","children":[]},{"level":2,"title":"终止进程","slug":"终止进程","link":"#终止进程","children":[]},{"level":2,"title":"全局描述符表GDT和局部描述符表LDT","slug":"全局描述符表gdt和局部描述符表ldt","link":"#全局描述符表gdt和局部描述符表ldt","children":[]},{"level":2,"title":"任务的堆栈","slug":"任务的堆栈","link":"#任务的堆栈","children":[{"level":3,"title":"用户态堆栈","slug":"用户态堆栈","link":"#用户态堆栈","children":[]},{"level":3,"title":"内核态堆栈","slug":"内核态堆栈","link":"#内核态堆栈","children":[]},{"level":3,"title":"任务内核态堆栈和用户态堆栈的切换","slug":"任务内核态堆栈和用户态堆栈的切换","link":"#任务内核态堆栈和用户态堆栈的切换","children":[]}]}],"git":{"createdTime":1691943816000,"updatedTime":1691943816000,"contributors":[{"name":"kryoxygen","email":"kryoxygen@gmail.com","commits":1}]},"readingTime":{"minutes":4.74,"words":1421},"filePathRelative":"notes/Linux/Linux内核体系结构.md","localizedDate":"2023年8月13日","excerpt":"<figure><figcaption>内核结构图</figcaption></figure>\\n<h1> linux 进程控制</h1>\\n<blockquote>\\n<p>对于 Linux0.11 内核而言，只支持 64 个进程，且 Linux 的内核堆栈和恶用户堆栈是分开的。用户堆栈用于存放进程在用户态下调用函数、局部变量等参数。</p>\\n</blockquote>\\n<h2> 任务数据结构</h2>\\n<p>内核程序徐通过进程表对进程进行管理，每个进程表项是一个 task_struct 任务结构(即 PCB)指针。</p>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">task_struct</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">long</span> state<span class=\\"token punctuation\\">;</span>                     <span class=\\"token comment\\">// 任务的运行状态，-1不可运行，0可运行，&gt;0中止</span>\\n    <span class=\\"token keyword\\">long</span> counter<span class=\\"token punctuation\\">;</span>                   <span class=\\"token comment\\">// 任务运行时间计数（时间片），递减</span>\\n    <span class=\\"token keyword\\">long</span> priority<span class=\\"token punctuation\\">;</span>                  <span class=\\"token comment\\">// 运行优先数</span>\\n    <span class=\\"token keyword\\">long</span> signal<span class=\\"token punctuation\\">;</span>                    <span class=\\"token comment\\">// 信号</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sigaction</span> sigaction<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">32</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 信号属性结构</span>\\n    <span class=\\"token keyword\\">long</span> blocked<span class=\\"token punctuation\\">;</span>                   <span class=\\"token comment\\">// 屏蔽码</span>\\n    <span class=\\"token keyword\\">int</span> exit_code<span class=\\"token punctuation\\">;</span>                  <span class=\\"token comment\\">// 执行停止的退出码</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">long</span> start_code<span class=\\"token punctuation\\">;</span>       <span class=\\"token comment\\">// 代码段地址</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">long</span> end_code<span class=\\"token punctuation\\">;</span>         <span class=\\"token comment\\">// 代码段长度</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">long</span> end_data<span class=\\"token punctuation\\">;</span>         <span class=\\"token comment\\">// 代码长度+数据长度</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">long</span> brk<span class=\\"token punctuation\\">;</span>              <span class=\\"token comment\\">// 总长度</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">long</span> start_stack<span class=\\"token punctuation\\">;</span>      <span class=\\"token comment\\">// 堆栈段地址</span>\\n    <span class=\\"token keyword\\">long</span> pid<span class=\\"token punctuation\\">;</span>                   <span class=\\"token comment\\">// 进程号</span>\\n    <span class=\\"token keyword\\">long</span> father<span class=\\"token punctuation\\">;</span>                    <span class=\\"token comment\\">// 父进程号</span>\\n    <span class=\\"token keyword\\">long</span> pgrp<span class=\\"token punctuation\\">;</span>                      <span class=\\"token comment\\">// 父进程组号</span>\\n    <span class=\\"token keyword\\">long</span> session<span class=\\"token punctuation\\">;</span>                   <span class=\\"token comment\\">// 会话号</span>\\n    <span class=\\"token keyword\\">long</span> leader<span class=\\"token punctuation\\">;</span>                    <span class=\\"token comment\\">// 会话首领</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">short</span> uid<span class=\\"token punctuation\\">;</span>             <span class=\\"token comment\\">// 用户id</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">short</span> euid<span class=\\"token punctuation\\">;</span>            <span class=\\"token comment\\">// 有效用户id</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">short</span> suid<span class=\\"token punctuation\\">;</span>            <span class=\\"token comment\\">// 保存的用户id</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">short</span> gid<span class=\\"token punctuation\\">;</span>             <span class=\\"token comment\\">// 组id</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">short</span> egid<span class=\\"token punctuation\\">;</span>            <span class=\\"token comment\\">// 有效组id</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">short</span> sgid<span class=\\"token punctuation\\">;</span>            <span class=\\"token comment\\">// 保存的组id</span>\\n    <span class=\\"token keyword\\">long</span> alarm<span class=\\"token punctuation\\">;</span>                     <span class=\\"token comment\\">// 报警定时值</span>\\n    <span class=\\"token keyword\\">long</span> utime<span class=\\"token punctuation\\">;</span>                     <span class=\\"token comment\\">// 用户态运行时间</span>\\n    <span class=\\"token keyword\\">long</span> stime<span class=\\"token punctuation\\">;</span>                     <span class=\\"token comment\\">// 系统态运行时间</span>\\n    <span class=\\"token keyword\\">long</span> cutime<span class=\\"token punctuation\\">;</span>                    <span class=\\"token comment\\">// 子进程用户态运行时间</span>\\n    <span class=\\"token keyword\\">long</span> cstime<span class=\\"token punctuation\\">;</span>                    <span class=\\"token comment\\">// 子进程系统态运行时间</span>\\n    <span class=\\"token keyword\\">long</span> start_time<span class=\\"token punctuation\\">;</span>                <span class=\\"token comment\\">// 进程开始时刻</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">short</span> used_math<span class=\\"token punctuation\\">;</span>       <span class=\\"token comment\\">// 标志是否使用了</span>\\n    <span class=\\"token keyword\\">int</span> tty<span class=\\"token punctuation\\">;</span>                        <span class=\\"token comment\\">// 进程使用tty的设备号</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">short</span> umask<span class=\\"token punctuation\\">;</span>           <span class=\\"token comment\\">// 文件创建属性屏蔽位</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">m_inode</span> <span class=\\"token operator\\">*</span>pwd<span class=\\"token punctuation\\">;</span>            <span class=\\"token comment\\">// 当前工作目录i节点结构</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">m_inode</span> <span class=\\"token operator\\">*</span>root<span class=\\"token punctuation\\">;</span>           <span class=\\"token comment\\">// 根目录i节点结构</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">m_inode</span> <span class=\\"token operator\\">*</span>executable<span class=\\"token punctuation\\">;</span>     <span class=\\"token comment\\">// 执行文件i节点结构</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">long</span> close_on_exec<span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">// 执行时关闭文件句柄位图标志</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">file</span> <span class=\\"token operator\\">*</span>filp<span class=\\"token punctuation\\">[</span>NR_OPEN<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>     <span class=\\"token comment\\">// 文件结构指针表</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">desc_struct</span> ldt<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>      <span class=\\"token comment\\">// 任务局部指针表</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">tss_struct</span> tss<span class=\\"token punctuation\\">;</span>          <span class=\\"token comment\\">// 进程的任务状态段信息结构</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"Kry oxygen","license":"CC BY-NC-SA 4.0"},"autoDesc":true}');export{n as data};
